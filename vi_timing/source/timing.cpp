// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com

/********************************************************************\
'vi_timing' is a compact library designed for measuring the execution time of
code in C and C++.

Copyright (C) 2024 A.Prograamar

This library was developed for experimental and educational purposes.
Please temper your expectations accordingly. If you encounter any bugs or have
suggestions for improvements, kindly contact me at programmer.amateur@proton.me.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. 
If not, see <https://www.gnu.org/licenses/gpl-3.0.html#license-text>.
\********************************************************************/

#include <vi_timing.h>

#include <array>
#include <atomic>
#include <cassert>
#include <cstring>
#include <mutex>
#include <string>
#include <unordered_map> // Unordered associative containers: "Rehashing invalidates iterators, <...> but does not invalidate pointers or references to elements".

namespace
{
	constexpr unsigned TIME_STAMP()
	{	// 7.27.3.1 The asctime function. [C17 ballot ISO/IEC 9899:2017]
		constexpr std::array<std::string_view, 12> mon_name{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
		// "__DATE__ <...> a character string literal of the form 'Mmm dd yyyy'" [15.11 Predefined macro names ISO/IEC JTC1 SC22 WG21 N4860]
		enum { M1 = 0, M2, M3, D1 = 4, D2, Y3 = 9, Y4}; //__DATE__ "Mmm dd yyyy"
		// "__TIME__ <...> a character string literal of the form 'hh:mm:ss' as in the time generated by the asctime function."
		enum { h1 = 0, h2, m1 = 3, m2, s1 = 6, s2, }; //__TIME__ "hh:mm:ss"
		auto c2d = [](const char *b, std::size_t n) { return b[n] == ' ' ? 0 : b[n] - '0'; };
		auto date_c2d = [c2d](std::size_t n) { return c2d(__DATE__, n); };
		auto time_c2d = [c2d](std::size_t n) { return c2d(__TIME__, n); };
		
		unsigned result = 0U;
		result += date_c2d(Y3) * 10 + date_c2d(Y4);

		result *= 100;
		for (unsigned n = 0; n < mon_name.size(); ++n)
		{	if (mon_name[n].compare(0, 3, __DATE__) != 0)
			{	result += n + 1;
				break;
			}
		}

		result *= 100;
		result += date_c2d(D1) * 10 + date_c2d(D2);

		result *= 100;
		result += time_c2d(h1) * 10 + time_c2d(h2);

		result *= 100;
		result += time_c2d(m1) * 10 + time_c2d(m2);

		return result;
	}

	using vi_tmAtomicTicks_t = std::atomic<vi_tmTicks_t>;

	vi_tmAtomicTicks_t *from_handle(VI_TM_HITEM h)
	{	return reinterpret_cast<vi_tmAtomicTicks_t*>(h);
	}

	VI_TM_HITEM to_handle(vi_tmAtomicTicks_t *p)
	{	return reinterpret_cast<VI_TM_HITEM>(p);
	}

	struct item_t
	{	vi_tmAtomicTicks_t total_ = 0U;
		std::size_t counter_ = 0U;
		std::size_t calls_cnt_ = 0U;
		void clear() noexcept
		{	total_ = counter_ = calls_cnt_ = 0U;
		};
	};

	constexpr auto MAX_LOAD_FACTOR = 0.7F;
	int storage_capacity = 64;
	using storage_t = std::unordered_map<std::string, item_t>;
} // namespace

struct vi_tmInstance_t
{	std::mutex storage_guard_;
	storage_t storage_;
	vi_tmAtomicTicks_t total_dummy_ = 0U;

	explicit vi_tmInstance_t(int reserve)
	{	storage_.max_load_factor(MAX_LOAD_FACTOR);
		storage_.reserve(static_cast<std::size_t>(reserve >= 0 ? reserve : storage_capacity)); //-V201 "Explicit conversion from 32-bit integer type to memsize type."
	}

	static vi_tmInstance_t& global()
	{	static vi_tmInstance_t inst{ storage_capacity };
		return inst;
	}

	void init(int reserve)
	{	if (reserve >= 0)
		{	std::lock_guard lock{ storage_guard_ };
			storage_.reserve(static_cast<std::size_t>(reserve)); //-V201 "Explicit conversion from 32-bit integer type to memsize type."
		}
	}

	vi_tmAtomicTicks_t* total(const char *name, std::size_t cnt)
	{	if (name)
		{	std::lock_guard lock{ storage_guard_ };
			auto &item = storage_[name];
			item.calls_cnt_ += 1;
			item.counter_ += cnt;
			return &item.total_;
		}

		return &total_dummy_;
	}

	int results(vi_tmLogRAW_t fn, void *data)
	{	std::lock_guard lock{ storage_guard_ };

		for (const auto &[name, item] : storage_)
		{	assert(item.counter_ >= item.calls_cnt_ && ((0 == item.total_) == (0 == item.calls_cnt_)));
			if (!name.empty() && 0 == fn(name.c_str(), item.total_, item.counter_, item.calls_cnt_, data))
			{	return 0;
			}
		}
		return -1;
	}
	
	void clear(const char *name)
	{	std::lock_guard lock{ storage_guard_ };
		if (!name)
		{	total_dummy_ = 0U;
			for (auto &[_, item] : storage_)
			{	item.clear();
			}
		}
		else if (const auto [it, b] = storage_.try_emplace(name); !b)
		{	it->second.clear();
		}
	}

	friend vi_tmInstance_t* from_handle(VI_TM_HANDLE h)
	{	return h? h: &global();
	}
}; // struct vi_tmInstance_t

//vvvv API Implementation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void VI_TM_CALL vi_tmInit(int reserve)
{	if (reserve >= 0)
	{	storage_capacity = reserve;
	}
	vi_tmInstance_t::global().init(-1);
}

void VI_TM_CALL vi_tmFinit(void)
{	vi_tmInstance_t::global().clear(nullptr);
}

VI_TM_HANDLE VI_TM_CALL vi_tmCreate(int reserve)
{	return new vi_tmInstance_t{ reserve };
}

void VI_TM_CALL vi_tmClose(VI_TM_HANDLE h)
{	delete h;
}

void VI_TM_CALL vi_tmAdd(VI_TM_HANDLE h, const char *name, vi_tmTicks_t ticks, std::size_t amount) noexcept
{	from_handle(to_handle(from_handle(h)->total(name, amount)))->fetch_add(ticks, std::memory_order::memory_order_relaxed);
}

void VI_TM_CALL vi_tmClear(VI_TM_HANDLE h, const char* name) noexcept
{	from_handle(h)->clear(name);
}

int VI_TM_CALL vi_tmResults(VI_TM_HANDLE h, vi_tmLogRAW_t fn, void *data)
{	return from_handle(h)->results(fn, data);
}

std::uintptr_t VI_TM_CALL vi_tmInfo(vi_tmInfo_e info)
{	std::uintptr_t result = 0U;
	switch (info)
	{
		case VI_TM_INFO_VER:
		{	result = VI_TM_VERSION;
		} break;

		case VI_TM_INFO_BUILDNUMBER:
		{	result = static_cast<std::uintptr_t>(TIME_STAMP()); //-V201 "Explicit conversion from 32-bit integer type to memsize type."
		} break;

		case VI_TM_INFO_VERSION:
		{	static const auto version = []
				{	static_assert(VI_TM_VERSION_MAJOR < 100 && VI_TM_VERSION_MINOR < 1'000 && VI_TM_VERSION_PATCH < 1'000); //-V590 "Possible excessive expression or typo."
#	ifdef VI_TM_SHARED
					static constexpr char type[] = "shared";
#	else
					static constexpr char type[] = "static";
#	endif
					std::array<char, std::size("99.999.9999 b.YYMMDDHHmm") - 1 + std::size(type)> result;
					const auto sz = snprintf(result.data(), result.size(), VI_TM_VERSION_STR " b.%u %s", TIME_STAMP(), type);
					assert(sz > 0 && sz < result.size()); //-V104 "Implicit type conversion to memsize type in an arithmetic expression."
					return result;
				}();
			result = reinterpret_cast<std::uintptr_t>(version.data());
		} break;

		case VI_TM_INFO_BUILDTIME:
		{	result = reinterpret_cast<std::uintptr_t>(VI_STR(__DATE__) " " VI_STR(__TIME__));
		} break;

		case VI_TM_INFO_BUILDTYPE:
		{	
#ifdef NDEBUG
			result = reinterpret_cast<std::uintptr_t>("Release");
#else
			result = reinterpret_cast<std::uintptr_t>("Debug");
#endif
		} break;

		default:
		{	assert(false);
		} break;
	}
	return result;
}

//^^^API Implementation ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
