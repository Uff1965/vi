<?xml version="1.0" standalone="yes"?>
<NewDataSet>
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:UseCurrentLocale="true">
      <xs:complexType>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="SuppressVersion">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="CurrentVersion" type="xs:int" minOccurs="0" />
                <xs:element name="IsPrimary" type="xs:boolean" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="vi_timing" msdata:CaseSensitive="False">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="FileName" type="xs:string" default="" />
                <xs:element name="ErrorCode" type="xs:string" default="" />
                <xs:element name="Message" type="xs:string" default="" />
                <xs:element name="CodePrev" type="xs:unsignedInt" default="0" />
                <xs:element name="CodeCurrent" type="xs:unsignedInt" default="0" />
                <xs:element name="CodeNext" type="xs:unsignedInt" default="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:complexType>
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">
        <xs:selector xpath=".//vi_timing" />
        <xs:field xpath="FileName" />
        <xs:field xpath="ErrorCode" />
        <xs:field xpath="Message" />
        <xs:field xpath="CodePrev" />
        <xs:field xpath="CodeCurrent" />
        <xs:field xpath="CodeNext" />
      </xs:unique>
    </xs:element>
  </xs:schema>
  <SuppressVersion>
    <CurrentVersion>3</CurrentVersion>
    <IsPrimary>false</IsPrimary>
  </SuppressVersion>
  <vi_timing>
    <FileName>misc.cpp</FileName>
    <ErrorCode>V1007</ErrorCode>
    <Message>The value from the potentially uninitialized optional 'prev' is used. Probably it is a mistake.</Message>
    <CodePrev>125</CodePrev>
    <CodeCurrent>1512322387</CodeCurrent>
    <CodeNext>125</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>misc.cpp</FileName>
    <ErrorCode>V723</ErrorCode>
    <Message>Function returns a pointer to the internal string buffer of a local object, which will be destroyed: return VI_TM_GIT_DATETIME.data();</Message>
    <CodePrev>3456008126</CodePrev>
    <CodeCurrent>1745145226</CodeCurrent>
    <CodeNext>0</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>misc.cpp</FileName>
    <ErrorCode>V723</ErrorCode>
    <Message>Function returns a pointer to the internal string buffer of a local object, which will be destroyed: return VI_TM_GIT_DESCRIBE.data();</Message>
    <CodePrev>3215021472</CodePrev>
    <CodeCurrent>1745183626</CodeCurrent>
    <CodeNext>0</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>misc.cpp</FileName>
    <ErrorCode>V723</ErrorCode>
    <Message>Function returns a pointer to the internal string buffer of a local object, which will be destroyed: return VI_TM_GIT_COMMIT.data();</Message>
    <CodePrev>3843594432</CodePrev>
    <CodeCurrent>3657551019</CodeCurrent>
    <CodeNext>0</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>props.cpp</FileName>
    <ErrorCode>V2528</ErrorCode>
    <Message>The comma operator should not be used.</Message>
    <CodePrev>539</CodePrev>
    <CodeCurrent>427922012</CodeCurrent>
    <CodeNext>4112831390</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>props.cpp</FileName>
    <ErrorCode>V2528</ErrorCode>
    <Message>The comma operator should not be used.</Message>
    <CodePrev>4002109740</CodePrev>
    <CodeCurrent>639758083</CodeCurrent>
    <CodeNext>125</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>props.cpp</FileName>
    <ErrorCode>V2528</ErrorCode>
    <Message>The comma operator should not be used.</Message>
    <CodePrev>10531501</CodePrev>
    <CodeCurrent>1234703414</CodeCurrent>
    <CodeNext>2992736150</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>report.cpp</FileName>
    <ErrorCode>V2571</ErrorCode>
    <Message>Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: 'static_cast&lt; data_t * &gt; (callback_data)'.</Message>
    <CodePrev>3448356004</CodePrev>
    <CodeCurrent>2853118424</CodeCurrent>
    <CodeNext>3903532008</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>report.cpp</FileName>
    <ErrorCode>V2571</ErrorCode>
    <Message>Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: 'static_cast&lt; data_t * &gt; (callback_data)'.</Message>
    <CodePrev>3448356004</CodePrev>
    <CodeCurrent>3687785824</CodeCurrent>
    <CodeNext>1586164615</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2550</ErrorCode>
    <Message>Floating-point expressions should not be directly tested for equality or inequality. It is better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>1686278686</CodePrev>
    <CodeCurrent>1261533246</CodeCurrent>
    <CodeNext>100</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2550</ErrorCode>
    <Message>Floating-point expressions should not be directly tested for equality or inequality. It is better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>839883468</CodePrev>
    <CodeCurrent>1686278686</CodeCurrent>
    <CodeNext>1261533246</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2550</ErrorCode>
    <Message>Floating-point expressions should not be directly tested for equality or inequality. It is better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>839883468</CodePrev>
    <CodeCurrent>1686278686</CodeCurrent>
    <CodeNext>2042128961</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2550</ErrorCode>
    <Message>Floating-point expressions should not be directly tested for equality or inequality. It is better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>25677816</CodePrev>
    <CodeCurrent>1686279134</CodeCurrent>
    <CodeNext>2042128961</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2550</ErrorCode>
    <Message>Floating-point expressions should not be directly tested for equality or inequality. It is better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>100</CodePrev>
    <CodeCurrent>2450030656</CodeCurrent>
    <CodeNext>1528316927</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2550</ErrorCode>
    <Message>Floating-point expressions should not be directly tested for equality or inequality. It is better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>100</CodePrev>
    <CodeCurrent>2450032448</CodeCurrent>
    <CodeNext>10020437</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2561</ErrorCode>
    <Message>The result of an assignment expression should not be used.</Message>
    <CodePrev>2523169370</CodePrev>
    <CodeCurrent>54943149</CodeCurrent>
    <CodeNext>41</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2564</ErrorCode>
    <Message>There should be no 'integral to floating' implicit cast. Consider inspecting the left operand 'md.flt_calls_' of the operator '+'.</Message>
    <CodePrev>1061267523</CodePrev>
    <CodeCurrent>988626150</CodeCurrent>
    <CodeNext>3136132722</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V2564</ErrorCode>
    <Message>There should be no 'integral to floating' implicit cast. Consider inspecting the left operand 'md.flt_calls_' of the operator '=='.</Message>
    <CodePrev>1686278686</CodePrev>
    <CodeCurrent>1261533246</CodeCurrent>
    <CodeNext>100</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V550</ErrorCode>
    <Message>An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>1686278686</CodePrev>
    <CodeCurrent>1261533246</CodeCurrent>
    <CodeNext>100</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V550</ErrorCode>
    <Message>An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>839883468</CodePrev>
    <CodeCurrent>1686278686</CodeCurrent>
    <CodeNext>1261533246</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V550</ErrorCode>
    <Message>An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>839883468</CodePrev>
    <CodeCurrent>1686278686</CodeCurrent>
    <CodeNext>2042128961</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V550</ErrorCode>
    <Message>An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>25677816</CodePrev>
    <CodeCurrent>1686279134</CodeCurrent>
    <CodeNext>2042128961</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V550</ErrorCode>
    <Message>An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>100</CodePrev>
    <CodeCurrent>2450030656</CodeCurrent>
    <CodeNext>1528316927</CodeNext>
  </vi_timing>
  <vi_timing>
    <FileName>timing.cpp</FileName>
    <ErrorCode>V550</ErrorCode>
    <Message>An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) &lt; Epsilon.</Message>
    <CodePrev>100</CodePrev>
    <CodeCurrent>2450032448</CodeCurrent>
    <CodeNext>10020437</CodeNext>
  </vi_timing>
</NewDataSet>